name: goreleaser

on:
  push:
    # run only against tags
    tags:
      - '*'
    # Triggers the workflow on push or pull request events but only for the "main" branch
    branches:
      - main
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# These permissions are needed for the job to interact with GitHub's OIDC Token endpoint.
permissions:
  contents: write  
  id-token: write
  # packages: write
  # issues: write

env:
  SAM_CLI_TELEMETRY: 0
  AWS_REGION: 'us-east-1'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git fetch --force --tags

      - name: Setup Golang env
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.20.1'
          cache: true

      - name: List dependencies and updated versions
        run: go list -m -u all

      - name: Prune unused dependencies, include dependencies for all possible OS/architectures
        run: go mod tidy

      - name: Verify dependencies with their hashes
        run: go mod verify

      - name: Run Go analyzers in the current and all sub-directories
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run tests
        run: go test -race -vet=off ./...

      - name: Retrieve GitHub Repo name from github.repository
        env:
          GITHUB_REPO: ${{ github.repository }}
        id: splitstr
        run: echo "repo_name=${GITHUB_REPO##*/}" >> $GITHUB_OUTPUT

      # Prepare AWS env for build, release and deploy
      - name: Setup Python for SAM CLI
        uses: actions/setup-python@v4.5.0
        with:
          python-version: "3.8"

      - name: Setup AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::703730886047:role/github-actions-georgedavis-triumphtech

      - name: Prepare S3
        run: |
          aws s3 mb s3://${{ steps.splitstr.outputs.repo_name }}

      - name: Run Go Releaser and Upload to S3
        id: goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
          S3_BUCKET: ${{ steps.splitstr.outputs.repo_name }}

      - name: Get Archive Path
        id: zipname
        run: |
          echo "built_file=`jq -cr 'map(select(.type | contains("Archive")) | select(.goarch) | .name)[]' dist/artifacts.json`" >> $GITHUB_OUTPUT

      - name: Print Archive Path
        run: echo ${{ steps.zipname.outputs.built_file }}

      - name: SAM Build
        run: sam build # --use-container

      - name: SAM Package
        run: sam package --config-env default > packaged-template.yaml

      - name: Validate SAM template
        run: sam validate --lint --template-file packaged-template.yaml

      - name: SAM Deploy
        run: |
          sam deploy --config-env default --parameter-overrides ParameterKey=region,ParameterValue=${{ env.AWS_REGION }} ParameterKey=AppVersion,ParameterValue=${{ github.ref_name }}-${{ github.run_attempt }} ParameterKey=AppName,ParameterValue=${{ steps.splitstr.outputs.repo_name }} ParameterKey=AppReleaseFileName,ParameterValue=${{ steps.zipname.outputs.built_file }} --no-confirm-changeset --no-fail-on-empty-changeset --template-file packaged-template.yaml